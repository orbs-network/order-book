package abi

import (
	"fmt"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/assert"
)

const expectedAbi = `0d7a16c3000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000022b1c8c1227a0000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000001a08d64fb4a7d0b6da5606a1e4619c147c3fb95e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0cb889707d426a7a386870a03bc70d1b06975980000000000000000000000000000000000000000000000022b1c8c1227a0000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000b94c1a3e11f8aaa25d27caf8dd05818e6f2ad970000000000000000000000004a9d6b0b19cbffcb0255550661ecb7014283c60e00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000065de5b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001d1499e622d69689cdf9004d05ec547d650ff211000000000000000000000000000000000000000000000001e02be4ae6c8400000000000000000000000000004a9d6b0b19cbffcb0255550661ecb7014283c60e000000000000000000000000000000000000000000000000000000000000008430783434313635643331366465666266373734646631643135303137343632323031383235373364663536646534343931646534626263303465386236333539346434383065663134363438373261363162353231613331383239393538636337626539363631353632313830663737306433303539353362356235383134616232316300000000000000000000000000000000000000000000000000000000`

func TestOrder_EncodeFragData(t *testing.T) {

	// Example usage
	info := Info{
		Reactor:                      common.HexToAddress("0x0B94c1A3E11F8aaA25D27cAf8DD05818e6f2Ad97"),
		Swapper:                      common.HexToAddress("0x4A9D6b0b19CBFfCB0255550661eCB7014283c60E"),
		Nonce:                        big.NewInt(1000),
		Deadline:                     big.NewInt(1709071200),
		AdditionalValidationContract: common.HexToAddress("0x0000000000000000000000000000000000000000"),
		AdditionalValidationData:     []byte{},
	}

	inAmount := big.NewInt(0)
	inAmount.SetString("40000000000000000000", 10)

	outAmount := big.NewInt(0)
	outAmount.SetString("34600000000000000000", 10)

	input := Input{
		Token:  common.HexToAddress("0xa0Cb889707d426A7A386870A03bc70d1b0697598"),
		Amount: inAmount,
	}

	output := Output{
		Token:     common.HexToAddress("0x1d1499e622D69689cdf9004d05Ec547d650Ff211"),
		Amount:    outAmount,
		Recipient: common.HexToAddress("0x4A9D6b0b19CBFfCB0255550661eCB7014283c60E"),
	}

	order := Order{
		Info:                   info,
		ExclusiveFiller:        common.HexToAddress("0x1a08D64Fb4a7D0b6DA5606A1e4619c147C3fB95e"),
		ExclusivityOverrideBps: big.NewInt(0),
		Input:                  input,
		Outputs:                []Output{output},
	}

	orderWithAmount := OrderWithAmount{
		Order:  order,
		Amount: inAmount,
	}

	sigSample := "0x44165d316defbf774df1d1501746220182573df56de4491de4bbc04e8b63594d480ef1464872a61b521a31829958cc7be9661562180f770d305953b5b5814ab21c"
	signedOrder := SignedOrder{
		OrderWithAmount: orderWithAmount,
		Signature:       []byte(sigSample),
	}

	signedOrders := []SignedOrder{
		signedOrder,
		//signedOrder,
	}

	packedData, err := PackSignedOrders(signedOrders)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	abi := fmt.Sprintf("%x", packedData)
	assert.Equal(t, expectedAbi, abi)

}
