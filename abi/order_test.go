package abi

import (
	"fmt"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/assert"
)

const expectedAbi = `0d7a16c30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000075bcd1500000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000efabcdefabcdefabcdefabcdefabcdefabcdefab00000000000000000000000000000000000000000000000000000000000003150000000000000000000000003572468a9876543210abcdef1357924680abcdef000000000000000000000000000000000000000000000000000000000000031500000000000000000000000000000000000000000000000000000000000001c00000000000000000000000001234567890123456789012345678901234567890000000000000000000000000efabcdefabcdefabcdefabcdefabcdefabcdefab000000000000000000000000000000000000000000000000000000000000007b00000000000000000000000000000000000000000000000000000000000001c8000000000000000000000000987654321098765432109876543210987654321000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000b6578616d706c65646174610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000468013579abcdefabcdefabcdef1357924680abc00000000000000000000000000000000000000000000000000000000000001c8000000000000000000000000efabcdefabcdefabcdefabcdefabcdefabcdefab000000000000000000000000000000000000000000000000000000000000008430786161616163316637643961616339636436633537356137656432323164636464656233386231383465363163356431383763383362313931623533353934383531663763636532646366343861653861653866633361646535313863623666393534326665366361623532393238343865623134333938386364303733666262626200000000000000000000000000000000000000000000000000000000`

func TestOrder_EncodeFragData(t *testing.T) {

	// Example usage
	info := Info{
		Reactor:                      common.HexToAddress("0x1234567890123456789012345678901234567890"),
		Swapper:                      common.HexToAddress("0xabcdefabcdefabcdefabcdefabcdefabcdefabcdefab"),
		Nonce:                        big.NewInt(123),
		Deadline:                     big.NewInt(456),
		AdditionalValidationContract: common.HexToAddress("0x9876543210987654321098765432109876543210"),
		AdditionalValidationData:     []byte("exampledata"),
	}

	input := Input{
		Token:  common.HexToAddress("0x13572468a9876543210abcdef1357924680abcdef"),
		Amount: big.NewInt(789),
	}

	output := Output{
		Token:     common.HexToAddress("0x2468013579abcdefabcdefabcdef1357924680abc"),
		Amount:    big.NewInt(456),
		Recipient: common.HexToAddress("0xabcdefabcdefabcdefabcdefabcdefabcdefabcdefab"),
	}

	order := Order{
		Info:                   info,
		ExclusiveFiller:        common.HexToAddress("0xabcdefabcdefabcdefabcdefabcdefabcdefabcdefab"),
		ExclusivityOverrideBps: big.NewInt(789),
		Input:                  input,
		Outputs:                []Output{output},
	}

	orderWithAmount := OrderWithAmount{
		Order:  order,
		Amount: big.NewInt(123456789),
	}

	sigSample := "0xaaaac1f7d9aac9cd6c575a7ed221dcddeb38b184e61c5d187c83b191b53594851f7cce2dcf48ae8ae8fc3ade518cb6f9542fe6cab5292848eb143988cd073fbbbb"
	signedOrder := SignedOrder{
		OrderWithAmount: orderWithAmount,
		Signature:       []byte(sigSample),
	}

	xx := fmt.Sprintf("%x", []byte("examplesignature"))
	t.Log(xx)

	signedOrders := []SignedOrder{
		signedOrder,
		//signedOrder,
	}

	packedData, err := PackSignedOrders(signedOrders)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
	abi := fmt.Sprintf("%x", packedData)
	assert.Equal(t, expectedAbi, abi)

}
