package models

import (
	"context"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/assert"
)

func TestOrder_EncodeFragData(t *testing.T) {
	var abiFragment = AbiFragment{
		Info: OrderInfo{
			Reactor:                      common.HexToAddress("0x100000000000000000000000000000"),
			Swapper:                      common.HexToAddress("0x200000000000000000000000000000"),
			Nonce:                        new(big.Int).SetInt64(int64(1)),
			Deadline:                     new(big.Int).SetInt64(int64(2)),
			AdditionalValidationContract: common.HexToAddress("0x300000000000000000000000000000"),
			AdditionalValidationData:     []byte{},
		},
		ExclusiveFiller:        common.HexToAddress("0x400000000000000000000000000000"),
		ExclusivityOverrideBps: new(big.Int).SetInt64(int64(3)),
		Input: PartialInput{
			Token:  common.HexToAddress("0x500000000000000000000000000000"),
			Amount: new(big.Int).SetInt64(int64(4)),
		},
		Outputs: []PartialOutput{
			{
				Token:     common.HexToAddress("0x600000000000000000000000000000"),
				Amount:    new(big.Int).SetInt64(int64(5)),
				Recipient: common.HexToAddress("0x700000000000000000000000000000"),
			},
		},
	}

	expectedRes := "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000700000000000000000000000000000"

	res, err := EncodeFragData(context.Background(), abiFragment)
	assert.NoError(t, err)
	assert.Equal(t, res, expectedRes)
}
